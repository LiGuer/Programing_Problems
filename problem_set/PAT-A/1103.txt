#include<iostream>
using namespace std;
#include<stdio.h>
#define MAXN 100000
#include<algorithm>
#include<vector>
vector<int> v,ans,tempans;
int N,K,P;
#include <cmath>
void getv() {
    int temp = 0, index = 1;
    while (temp <=N) {
        v.push_back(temp);cout<<v[index]<<' '<<temp<<endl;
        temp = pow(index,P);
        index++;
        cout<<v[index]<<endl;
    }
}
int maxsum=-1;
void DFS(int index,int tempsum,int tempk,int facsum)
{
    if(tempsum==N&&tempk==K){
        if(facsum>maxsum){
            maxsum=facsum;
            ans=tempans;
            return;
        }
    }
    if(tempk>K||tempsum>N)return;
    if(index<1)return;
    tempans.push_back(index);
    DFS(index,tempsum+v[index],tempk+1,facsum+index);
    tempans.pop_back();
    DFS(index-1,tempsum,tempk,facsum);
    return;
}

int main()
{

    scanf("%d%d%d",&N,&K,&P);
    getv();
    DFS(v.size()-1,0,0,0);
    if(maxsum==-1)cout<<"Impossible";
    else{
        printf("%d =",N);
        for(int i=0;i<K;i++){
            if(i!=0)printf(" +");
            printf(" %d^%d",ans[i],P);
        }
    }

}
