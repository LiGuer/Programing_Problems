Î´³É¹¦´úÂë£º
#include<iostream>
using namespace std;
#include<vector>
#include<map>
#include<algorithm>
struct node{int c,l;};
struct getnode{int c1,c2,l;};
vector<node> graph[50000];
bool cmp(getnode a,getnode b){return a.l<b.l;}
int main()
{
	int N,M,Q;
	cin>>N>>M>>Q;
	for(int i=0;i<M;i++){
		int s,e,l;
		cin>>s>>e>>l;
		graph[s].push_back({e,l});
	}
	
	while(Q--){
		int l,r,k,c;
		cin>>l>>r>>k>>c;
		map<int,int> cur;
		for(int i=l;i<=r;i++)if(i%k==c)cur[i]++;
		vector<getnode> getcity; 
		for(int i=l;i<=r;i++){
			if(cur[i]==0)continue;
			for(int j=0;j<graph[i].size();j++){
				if(cur[graph[i][j].c]==0)continue;
				if(i<graph[i][j].c)getcity.push_back({i,graph[i][j].c,graph[i][j].l});
				else getcity.push_back({graph[i][j].c,i,graph[i][j].l});
			}
		}
		
		sort(getcity.begin(),getcity.end(),cmp);
		int max=0;map<int,int> curcity;
		for(int i=0;i<getcity.size();i++)cout<<getcity[i].c1<<'-'<<getcity[i].c2<<'-'<<getcity[i].l<<endl;
		for(int i=0;i<getcity.size();i++){
			int c1=getcity[i].c1,c2=getcity[i].c2;
			if(max<getcity[i].l&&(curcity[c1]==0||curcity[c2]==0)){
				max=getcity[i].l;
			}
			curcity[c1]=1,curcity[c2]=1;
		}
		cout<<max<<endl;
	}
	
}